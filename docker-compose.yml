version: '3.8'

services:
  # PostgreSQL container: Creates both `user_service_db` and (via init.sql) bookingdb
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456789
      POSTGRES_DB: user_service_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB container for event and notification services
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network

  # RabbitMQ container with management UI
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network

  # User Service (FastAPI)
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    image: user-service:latest
    container_name: user-service
    ports:
      - "8000:8000"
    env_file:
      - ./user-service/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  # Booking Service (Flask)
  booking-service:
    build:
      context: ./booking-service
      dockerfile: Dockerfile
    image: booking-service:latest
    container_name: booking-service
    ports:
      - "5001:5001"
    env_file:
      - ./booking-service/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  # New Event Service (Node.js)
  new-event-service:
    build:
      context: ./new-event-service
      dockerfile: Dockerfile
    image: new-event-service:latest
    container_name: new-event-service
    ports:
      - "5000:5000"
    env_file:
      - ./new-event-service/.env
    depends_on:
      - mongodb
    networks:
      - app-network

  # Notification Service (Express.js)
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile.main
    image: notification-service:latest
    container_name: notification-service
    ports:
      - "5002:5002"
    env_file:
      - ./notification-service/.env
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
